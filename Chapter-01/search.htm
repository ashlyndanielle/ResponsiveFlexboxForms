<!doctype html>
<html>
<head>
<meta charset="UTF-8">
<title>short forms</title>
<link href="_css/base.css" rel="stylesheet" type="text/css" media="screen">
<style>

.search-form {
  width: 80%;
  margin: 0 auto;
}

input[type="search"] {
	box-sizing: border-box;
	background: #E9E9E9;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	padding: 0.35em 0.75em;
	border: none;
	font-size: 1.1em;
	text-decoration: none;
	line-height: normal;
	max-height: 3em;
}
button[type="submit"] {
	box-sizing: border-box;
	border-radius: 0px 2px 2px 0px;
	background: #8B798C;
	font-weight: 300;
	text-transform: uppercase;
	color: white;
	padding: 0.35em 0.75em;
	border: none;
	font-size: 1.1em;
	text-decoration: none;
	cursor: pointer;	
}
button[type="submit"]:hover {
	background: #b89fb9;
}

/* Flex Styles */

.search-form {
	display: flex;
	/* if space runs out the items will wrap to the next line */
	flex-wrap: wrap;
}

/*
  This flex property sets the indiviudal elements flexibility
  In this case, because they are on the same line, it works as a ratio
  saying that the input will take up 2times as much space as the button
  They're going to stretch to fill the parent container
*/
/* input[type="search"] {
  flex: 2;
}
button[type="submit"] {
  flex: 1;
} */
/* Flex shortand: grow, shrink, basis */
/*
  grow: how much bigger should I get than when I started, relative to the other flex items in the container
  shrink: ^^ how much should it shrink ^^
  basis: default/initial size - ALMOST like setting a min-width; if you set flex-wrap: wrap then it does act like a min-width
*/
input[type="search"] {
  /* I really want the input to be 250px but if there is room to grow let it grow at a ratio 2times the size of the other item(s) */
  flex: 2 0 250px;
}
button[type="submit"] {
  /* because the grow property is set, when it wraps to the next line it will take up all the available space, not just 90px */
  flex: 1 0 90px;
}

@media (max-width: 450px) {
  body {
    width: 100%;
    margin: 0;
    padding: 1em 0 2em 0;
  }
  header {
    padding: 2% 5%;
  }
}

</style>
</head>
<body>
<header>
<h1>Creating Responsive Forms with Flexbox</h1>
<p><a href="http://www.w3.org/TR/css3-flexbox/" title="Flexbox">Flexible Layout Box Model</a>, better known as <strong>Flexbox</strong>, is a great tool for crafting responsive regions or UI elements. While not well-suited for complete page layouts, Flexbox excels at controlling elements along a single axis or in arranging elements within discreet regions. This makes Flexbox a fantastic tool for creating responsive page elements that are normally tricky to handle, such as forms. Often Flexbox can create responsive components with a minimal amount of code and little to no media queries.</p>
<h2>Short Forms</h2>
<p>Our first exercise will focus on the basic concepts of how Flexbox can help create responsive content. We'll start with a basic search form that consists of two elements, a search input and a submit button.</p>
</header>
<article class="example">
<form class="search-form">
  <input type="search" name="search" placeholder="Search this site" class="search-input">
  <button type="submit" class="search-btn">Search</button>
</form>
</article>
</body>
</html>
